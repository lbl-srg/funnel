name: Master Release

on:
  workflow_dispatch:
    inputs:
      staging_validation:
        description: 'Confirm staging has been tested and is ready for release'
        required: true
        type: boolean
        default: false

env:
  GH_USERNAME: github-actions[bot]

jobs:
  validate-staging:
    runs-on: ubuntu-latest
    outputs:
      release-version: ${{ steps.get-version.outputs.version }}
      release-tag: ${{ steps.get-version.outputs.tag }}
    steps:
      - name: Validate input
        if: ${{ !github.event.inputs.staging_validation }}
        run: |
          echo "‚ùå Staging validation checkbox must be checked to proceed"
          exit 1

      - name: Checkout staging branch
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0

      - name: Check staging branch exists and has commits ahead of master
        run: |
          # Ensure we're on staging
          if [ "$(git branch --show-current)" != "staging" ]; then
            echo "‚ùå Not on staging branch"
            exit 1
          fi

          # Check if staging is ahead of master
          git fetch origin master
          AHEAD=$(git rev-list --count origin/master..staging)
          if [ "$AHEAD" -eq "0" ]; then
            echo "‚ùå Staging branch has no commits ahead of master"
            exit 1
          fi

          echo "‚úÖ Staging is $AHEAD commits ahead of master"

      - name: Check for release tag on staging
        id: get-version
        run: |
          # Check if HEAD has a version tag
          if git describe --tags --exact-match HEAD 2>/dev/null; then
            TAG=$(git describe --tags --exact-match HEAD)
            VERSION=$(echo "$TAG" | sed 's/^v//')
            echo "‚úÖ Found release tag: $TAG"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
          else
            echo "‚ùå No release tag found on staging HEAD"
            exit 1
          fi

      - name: Check for changelog entry
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if grep -q "## \[$VERSION\]" CHANGELOG.md || grep -q "## $VERSION" CHANGELOG.md; then
            echo "‚úÖ Changelog entry found for version $VERSION"
          else
            echo "‚ùå No changelog entry found for version $VERSION"
            exit 1
          fi

      - name: Check for binaries
        run: |
          if [ -d "pyfunnel/lib" ] && [ "$(ls -A pyfunnel/lib)" ]; then
            echo "‚úÖ Binaries found in pyfunnel/lib"
            ls -la pyfunnel/lib/
          else
            echo "‚ùå No binaries found in pyfunnel/lib"
            exit 1
          fi

      - name: Check staging validation marker
        run: |
          if [ -f ".staging-validated" ]; then
            echo "‚úÖ Staging validation marker found:"
            cat .staging-validated

            # Verify the marker contains the expected version
            if grep -q "Version: ${{ steps.get-version.outputs.version }}" .staging-validated; then
              echo "‚úÖ Validation marker matches expected version"
            else
              echo "‚ùå Validation marker version mismatch"
              exit 1
            fi
          else
            echo "‚ùå No staging validation marker found"
            echo "Please run the staging-release workflow first"
            exit 1
          fi

  merge-to-master:
    needs: validate-staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge staging to master
        run: |
          git config --global user.name "${GH_USERNAME}"
          git config --global user.email "${GH_USERNAME}@users.noreply.github.com"

          # Fetch staging
          git fetch origin staging

          # Merge staging into master
          git merge origin/staging --no-edit

          # Remove the staging validation marker before finalizing
          if [ -f ".staging-validated" ]; then
            git rm .staging-validated
            git commit -m "chore: remove staging validation marker"
          fi

          # Push to master
          git push origin master
          git push origin --tags

  create-github-release:
    needs: [validate-staging, merge-to-master]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Extract release notes from changelog
        id: release_notes
        run: |
          VERSION="${{ needs.validate-staging.outputs.release-version }}"

          # Extract content between version headers
          CONTENT=$(sed -n "/^## \[${VERSION}\]/,/^## \[/p" CHANGELOG.md | sed '$d' | tail -n +2)
          echo "Release notes:"
          echo "$CONTENT"

          # Handle multiline content for GitHub Actions
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: Build package
        run: python -m build --sdist --wheel .

      - name: Create GH Release (draft)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ needs.validate-staging.outputs.release-tag }}" dist/* \
            --title "${{ needs.validate-staging.outputs.release-tag }}" \
            --notes "${{ steps.release_notes.outputs.content }}" \
            --draft \
            --verify-tag

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/*

  notify-completion:
    needs: [validate-staging, merge-to-master, create-github-release, publish-to-pypi]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "## Master Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate-staging.outputs.release-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Staging Validation**: ${{ needs.validate-staging.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Merge to Master**: ${{ needs.merge-to-master.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: ${{ needs.create-github-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PyPI Publish**: ${{ needs.publish-to-pypi.result }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.publish-to-pypi.result }}" == "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üéâ **Release ${{ needs.validate-staging.outputs.release-tag }} completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "- üì¶ Available on PyPI: https://pypi.org/project/pyfunnel/${{ needs.validate-staging.outputs.release-version }}/" >> $GITHUB_STEP_SUMMARY
            echo "- üè∑Ô∏è GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-staging.outputs.release-tag }}" >> $GITHUB_STEP_SUMMARY
          fi
