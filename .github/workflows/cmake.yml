name: CMake

on: [push]

env:
  BUILD_TYPE: Release
  GH_USERNAME: ${{ github.actor }}

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8']

    steps:
      - uses: actions/checkout@v2

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.8
        with:
          cmake-version: '3.19.x'

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        shell: bash
        run: |
          python -VV
          python -m pip install --user --upgrade pip
          echo ${{ github.workspace }}
          python -m pip install --user -r ${{ github.workspace }}/requirements.txt
          if [[ ${{ matrix.os }} =~ .*"windows".* ]]; then python -m pip install --user dlib==19.4; fi


      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands.
        run: |
          cmake --version
          cmake -E make_directory ${{ github.workspace }}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{ github.workspace }}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: if ([[ ${{ matrix.os }} =~ .*"windows".* ]]); then cmake .. -A x64; else cmake ..; fi

      - name: Build
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --build . --target install --config $BUILD_TYPE

      - name: Test
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: ctest -C $BUILD_TYPE --verbose

      - name: Push changes to remote
        if: contains(matrix.os, 'latest') && contains(matrix.python-version, '3.8')
        run: |
          git config --global user.name $GH_USERNAME
          git config --global user.email $GH_USERNAME@users.noreply.github.com
          git config --global pull.rebase false
          git add ${{ github.workspace }}/pyfunnel/lib
          git commit -m "Add binaries" --allow-empty
          git pull
          git push
