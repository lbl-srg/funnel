name: Staging Release

on:
  workflow_dispatch:
    inputs:
      installation_mode:
        description: 'Installation and testing mode'
        required: false
        type: choice
        options:
          - 'test-pypi'
          - 'source'
        default: 'source'

env:
  GH_USERNAME: github-actions[bot]

jobs:
  version-bump:
    runs-on: ubuntu-latest
    outputs:
      new-release-created: ${{ steps.cz.outputs.new-release-created }}
      new-release-version: ${{ steps.cz.outputs.new-release-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ".[publish]"

      - name: Create staging branch from current branch
        run: |
          git config --global user.name "${GH_USERNAME}"
          git config --global user.email "${GH_USERNAME}@users.noreply.github.com"

          # Create fresh staging branch from current HEAD (overwrites existing)
          git checkout -B staging HEAD

      - name: Bump version and update changelog
        id: cz
        run: |
          cz bump
          # Check if a new release was created
          if git describe --tags --exact-match HEAD 2>/dev/null; then
            echo "new-release-created=true" >> $GITHUB_OUTPUT
            echo "new-release-version=$(git describe --tags --exact-match HEAD | sed 's/^v//')" >> $GITHUB_OUTPUT
          else
            echo "new-release-created=false" >> $GITHUB_OUTPUT
          fi

      - name: Push staging branch
        if: steps.cz.outputs.new-release-created == 'true'
        run: |
          git push --force-with-lease origin staging

  cmake-build:
    needs: version-bump
    if: needs.version-bump.outputs.new-release-created == 'true'
    uses: ./.github/workflows/cmake.yml
    with:
      ref: staging

  publish-test-pypi:
    needs: [version-bump, cmake-build]
    if:  |
     needs.version-bump.outputs.new-release-created == 'true' &&
     needs.cmake-build.outputs.result == 'success' &&
     github.event.inputs.installation_mode == 'test-pypi'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout staging branch
        uses: actions/checkout@v4
        with:
          ref: staging

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          path: pyfunnel/lib/
          merge-multiple: true

      - name: Debug - List downloaded artifacts
        run: |
          echo "Contents of pyfunnel/lib/ after artifact download:"
          find pyfunnel/lib/ -type f -ls || echo "No files found"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: Build package
        run: python -m build --sdist --wheel .

      - name: Publish to Test PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          python -m twine upload --repository testpypi dist/*

  test-package:
    needs: [version-bump, cmake-build]
    if: needs.version-bump.outputs.new-release-created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout staging branch
        uses: actions/checkout@v4
        with:
          ref: staging
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          path: pyfunnel/lib/
          merge-multiple: true

      - name: Install from Test PyPI
        if: github.event.inputs.installation_mode == 'test-pypi'
        run: |
          # Wait a bit for Test PyPI to propagate
          sleep 120

          # Install from Test PyPI
          # The `--extra-index-url https://pypi.org/simple/` ensures dependencies are installed from regular PyPI
          python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ pyfunnel==${{ needs.version-bump.outputs.new-release-version }}

      - name: Install from source
        if: github.event.inputs.installation_mode == 'source'
        run: |
          # Install from source
          python -m pip install --upgrade pip
          python -m pip install .

      - name: Run test
        run: |
          # Run the test from the directory with test data
          cd tests/test_bin && funnel --reference trended.csv --test simulated.csv --atolx 0.002 --atoly 0.002

          # Clean up test artifacts
          rm -rf results

      - name: Create staging validation marker
        run: |
          git config --global user.name "${GH_USERNAME}"
          git config --global user.email "${GH_USERNAME}@users.noreply.github.com"

          # Create validation marker indicating successful staging pipeline
          echo "Staging pipeline completed successfully on $(date)" > .staging-validated
          echo "Version: ${{ needs.version-bump.outputs.new-release-version }}" >> .staging-validated
          if [ "${{ github.event.inputs.installation_mode }}" == "test-pypi" ]; then
            echo "Test PyPI: Verified" >> .staging-validated
          else
            echo "Source Installation: Verified" >> .staging-validated
          fi
          echo "Binaries: Built and committed" >> .staging-validated

          git add .staging-validated
          git commit -m "chore: mark staging pipeline as validated"
          git push origin staging

  notify-completion:
    needs: [version-bump, cmake-build, publish-test-pypi, test-package]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "## Staging Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **New Release Published**: ${{ needs.version-bump.outputs.new-release-created }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.version-bump.outputs.new-release-created }}" == "true" ]; then
            echo "- **Version**: ${{ needs.version-bump.outputs.new-release-version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **CMake Build**: ${{ needs.cmake-build.outputs.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Installation Mode**: ${{ github.event.inputs.installation_mode }}" >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.event.inputs.installation_mode }}" == "test-pypi" ]; then
              echo "- **Test PyPI Publish**: ${{ needs.publish-test-pypi.result }}" >> $GITHUB_STEP_SUMMARY
            fi
          fi
